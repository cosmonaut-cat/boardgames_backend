// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/front_api/game.proto

package front_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameServicesClient is the client API for GameServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServicesClient interface {
	AddGame(ctx context.Context, in *Game_AddOrUpdateGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateGame(ctx context.Context, in *Game_AddOrUpdateGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetGame(ctx context.Context, in *Game_GetGameRequest, opts ...grpc.CallOption) (*Game, error)
}

type gameServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServicesClient(cc grpc.ClientConnInterface) GameServicesClient {
	return &gameServicesClient{cc}
}

func (c *gameServicesClient) AddGame(ctx context.Context, in *Game_AddOrUpdateGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/boardgames_backend.api.front_api.GameServices/AddGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServicesClient) UpdateGame(ctx context.Context, in *Game_AddOrUpdateGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/boardgames_backend.api.front_api.GameServices/UpdateGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServicesClient) GetGame(ctx context.Context, in *Game_GetGameRequest, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/boardgames_backend.api.front_api.GameServices/GetGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServicesServer is the server API for GameServices service.
// All implementations must embed UnimplementedGameServicesServer
// for forward compatibility
type GameServicesServer interface {
	AddGame(context.Context, *Game_AddOrUpdateGameRequest) (*emptypb.Empty, error)
	UpdateGame(context.Context, *Game_AddOrUpdateGameRequest) (*emptypb.Empty, error)
	GetGame(context.Context, *Game_GetGameRequest) (*Game, error)
	mustEmbedUnimplementedGameServicesServer()
}

// UnimplementedGameServicesServer must be embedded to have forward compatible implementations.
type UnimplementedGameServicesServer struct {
}

func (UnimplementedGameServicesServer) AddGame(context.Context, *Game_AddOrUpdateGameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGame not implemented")
}
func (UnimplementedGameServicesServer) UpdateGame(context.Context, *Game_AddOrUpdateGameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGame not implemented")
}
func (UnimplementedGameServicesServer) GetGame(context.Context, *Game_GetGameRequest) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGame not implemented")
}
func (UnimplementedGameServicesServer) mustEmbedUnimplementedGameServicesServer() {}

// UnsafeGameServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServicesServer will
// result in compilation errors.
type UnsafeGameServicesServer interface {
	mustEmbedUnimplementedGameServicesServer()
}

func RegisterGameServicesServer(s grpc.ServiceRegistrar, srv GameServicesServer) {
	s.RegisterService(&GameServices_ServiceDesc, srv)
}

func _GameServices_AddGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game_AddOrUpdateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServicesServer).AddGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boardgames_backend.api.front_api.GameServices/AddGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServicesServer).AddGame(ctx, req.(*Game_AddOrUpdateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServices_UpdateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game_AddOrUpdateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServicesServer).UpdateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boardgames_backend.api.front_api.GameServices/UpdateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServicesServer).UpdateGame(ctx, req.(*Game_AddOrUpdateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServices_GetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game_GetGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServicesServer).GetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boardgames_backend.api.front_api.GameServices/GetGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServicesServer).GetGame(ctx, req.(*Game_GetGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameServices_ServiceDesc is the grpc.ServiceDesc for GameServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "boardgames_backend.api.front_api.GameServices",
	HandlerType: (*GameServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGame",
			Handler:    _GameServices_AddGame_Handler,
		},
		{
			MethodName: "UpdateGame",
			Handler:    _GameServices_UpdateGame_Handler,
		},
		{
			MethodName: "GetGame",
			Handler:    _GameServices_GetGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/front_api/game.proto",
}
