// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/event.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventServicesClient is the client API for EventServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServicesClient interface {
	Append(ctx context.Context, in *Event_AppendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Scan(ctx context.Context, in *Event_ScanRequest, opts ...grpc.CallOption) (EventServices_ScanClient, error)
	Latest(ctx context.Context, in *Event_LatestRequest, opts ...grpc.CallOption) (*Event, error)
}

type eventServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServicesClient(cc grpc.ClientConnInterface) EventServicesClient {
	return &eventServicesClient{cc}
}

func (c *eventServicesClient) Append(ctx context.Context, in *Event_AppendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/boardgames_backend.api.EventServices/Append", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServicesClient) Scan(ctx context.Context, in *Event_ScanRequest, opts ...grpc.CallOption) (EventServices_ScanClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventServices_ServiceDesc.Streams[0], "/boardgames_backend.api.EventServices/Scan", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServicesScanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventServices_ScanClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventServicesScanClient struct {
	grpc.ClientStream
}

func (x *eventServicesScanClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventServicesClient) Latest(ctx context.Context, in *Event_LatestRequest, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/boardgames_backend.api.EventServices/Latest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServicesServer is the server API for EventServices service.
// All implementations must embed UnimplementedEventServicesServer
// for forward compatibility
type EventServicesServer interface {
	Append(context.Context, *Event_AppendRequest) (*emptypb.Empty, error)
	Scan(*Event_ScanRequest, EventServices_ScanServer) error
	Latest(context.Context, *Event_LatestRequest) (*Event, error)
	mustEmbedUnimplementedEventServicesServer()
}

// UnimplementedEventServicesServer must be embedded to have forward compatible implementations.
type UnimplementedEventServicesServer struct {
}

func (UnimplementedEventServicesServer) Append(context.Context, *Event_AppendRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedEventServicesServer) Scan(*Event_ScanRequest, EventServices_ScanServer) error {
	return status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (UnimplementedEventServicesServer) Latest(context.Context, *Event_LatestRequest) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Latest not implemented")
}
func (UnimplementedEventServicesServer) mustEmbedUnimplementedEventServicesServer() {}

// UnsafeEventServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServicesServer will
// result in compilation errors.
type UnsafeEventServicesServer interface {
	mustEmbedUnimplementedEventServicesServer()
}

func RegisterEventServicesServer(s grpc.ServiceRegistrar, srv EventServicesServer) {
	s.RegisterService(&EventServices_ServiceDesc, srv)
}

func _EventServices_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event_AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServicesServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boardgames_backend.api.EventServices/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServicesServer).Append(ctx, req.(*Event_AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventServices_Scan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Event_ScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServicesServer).Scan(m, &eventServicesScanServer{stream})
}

type EventServices_ScanServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventServicesScanServer struct {
	grpc.ServerStream
}

func (x *eventServicesScanServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _EventServices_Latest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event_LatestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServicesServer).Latest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/boardgames_backend.api.EventServices/Latest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServicesServer).Latest(ctx, req.(*Event_LatestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventServices_ServiceDesc is the grpc.ServiceDesc for EventServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "boardgames_backend.api.EventServices",
	HandlerType: (*EventServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Append",
			Handler:    _EventServices_Append_Handler,
		},
		{
			MethodName: "Latest",
			Handler:    _EventServices_Latest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Scan",
			Handler:       _EventServices_Scan_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/event.proto",
}
